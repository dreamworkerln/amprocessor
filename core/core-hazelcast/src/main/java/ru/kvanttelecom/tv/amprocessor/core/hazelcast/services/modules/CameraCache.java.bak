package ru.kvanttelecom.tv.amprocessor.core.hazelcast.services.cache;

import com.hazelcast.core.EntryEvent;
import com.hazelcast.core.EntryListener;
import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.map.MapEvent;
import com.hazelcast.map.listener.MapListener;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ru.dreamworkerln.spring.utils.common.maps.MapMirrorMerge;
import ru.dreamworkerln.spring.utils.common.maps.wrapper.ConcurrentMapWrapper;
import ru.kvanttelecom.tv.amprocessor.core.dto.camera.Camera;
import ru.kvanttelecom.tv.amprocessor.core.dto.cameradetails.CameraDetails;

import javax.annotation.Nonnull;
import javax.annotation.PostConstruct;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.ConcurrentMap;
import java.util.function.Predicate;
import java.util.stream.Stream;

import static ru.kvanttelecom.tv.amprocessor.core.hazelcast.configurations.cache.CacheConfig.*;


/**
 * Hazelcast storage for camera
 */
@Component
@Slf4j
public class CameraCache extends ConcurrentMapWrapper<String, Camera> {

    @Autowired
    private HazelcastInstance instance;

 //    @Autowired
 //    CameraDetailsService detailsService;
    
    @PostConstruct
    private void init() {
        map = instance.getMap(CAMERAS);

//        UUID addEntryListener(@Nonnull MapListener listener,
//        @Nonnull Predicate<K, V> predicate,
//        boolean includeValue);


        instance.getMap(CAMERAS).addEntryListener(new DetailsEntryListener() ,
            e -> true,
            true);
    }

    public Camera get(String name) {
        return super.get(name);
    }

    public Camera set(Camera camera) {
        return put(camera.getName(), camera);
    }

    @Override
    public Camera put(String name, Camera camera) {
        return map.put(name, camera);
    }

    public Camera remove(String name) {
        return map.remove(name);
    }

    @Override
    public void removeAll(Set<String> collection) {
        map.keySet().removeAll(collection);
    }

    @Override
    public void putAll(Map<? extends String, ? extends Camera> otherMap) {
        map.putAll(otherMap);
    }

    @Override
    public boolean removeIf(Predicate<Entry<String,Camera>> filter) {
        return map.entrySet().removeIf(filter);
    }

    @Override
    public int size() {
        return map.size();
    }

    @Override
    public ConcurrentMap<String,Camera> getMap() {
        return map;
    }

    public Stream<Entry<String,Camera>> getCamera() {
        return map.entrySet().stream();
    }

    @Override
    public Camera putIfAbsent(String name, Camera value) {
        return map.putIfAbsent(name, value);
    }

    public boolean remove(String name, Camera value) {
        return map.remove(name, value);
    }

    @Override
    public boolean replace(String name, Camera oldValue, Camera newValue) {
        return map.replace(name, oldValue, newValue);
    }

    @Override
    public Camera replace(String name,  Camera value) {
        return map.replace(name, value);
    }

    @Override
    public boolean isEmpty() {
        return map.isEmpty();
    }

    @Override
    public boolean containsValue(Object value) {
        return map.containsValue(value);
    }

    @Override
    public Set<String> keySet() {
        return map.keySet();
    }

    public void clear() {
        map.clear();
    }

//    public void merge(Map<String, Camera> from) {
//        MapMirrorMerge.merge(from, map);
//    }

    public void addEntryListener(@Nonnull MapListener listener,
                                 @Nonnull com.hazelcast.query.Predicate<String, CameraDetails> predicate,
                                 boolean includeValue) {

    }
}
