<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration>
<configuration scan="true">



    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>

    <!--если включишь base.xml то включит логирование в консоль  по-умолчанию - будет дублирование-->
    <!--<include resource="org/springframework/boot/logging/logback/base.xml"/>-->
    <!--<include resource="org/springframework/boot/logging/logback/file-appender.xml"/>-->
    <!--<include resource="org/springframework/boot/logging/logback/console-appender.xml"/>-->

    <!-- custom coloring conversion -->
    <conversionRule conversionWord="highlightex" converterClass="com.acme.logback.HighlightingCompositeConverterEx" />

    <!-- https://logback.qos.ch/manual/configuration.html#shutdownHook and https://jira.qos.ch/browse/LOGBACK-1090 -->
    <shutdownHook class="ch.qos.logback.core.hook.DelayingShutdownHook"/>

    <!--http://logback.qos.ch/manual/configuration.html#LevelChangePropagator - хз зачем это, что-то про связку с jul -->
    <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator">
        <resetJUL>true</resetJUL>
    </contextListener>


    <!-- =========================================================================  -->



    <property name="LOG_FILE_TRACE" value="log/trace.log"/>
    <property name="LOG_FILE_INFO" value="log/info.log"/>
    <property name="LOG_FILE_ERROR" value="log/error.log"/>
    <property name="LOG_FILE_STASH" value="log/stash.log"/>


    <!--  Время в stdout в локальном часовом поясе -->
    <!--  plain-text stdout -->
    <springProfile name="!log2json">

        <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
            <encoder>
                <pattern>%d{HH:mm:ss.SSS} %highlightex(%-5level) [%.20thread] %cyan(%logger{10}:%L) - %msg%n</pattern>
            </encoder>
        </appender>

        <!--  Время в файловых логах в UTC -->
        <appender name="LOG_TRACE" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <file>${LOG_FILE_TRACE}</file>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <!-- daily rollover -->
                <fileNamePattern>${LOG_FILE_TRACE}.%d{yyyy-MM-dd}_%i.log.gz</fileNamePattern>
                <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                    <!-- or whenever the file size reaches 10MB -->
                    <maxFileSize>10MB</maxFileSize>
                </timeBasedFileNamingAndTriggeringPolicy>
                <!-- keep 30 days' worth of history -->
                <maxHistory>30</maxHistory>
            </rollingPolicy>
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>TRACE</level>
            </filter>
            <encoder>
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS,UTC} %-5level [%thread] %logger{10}:%L - %msg%n</pattern>
            </encoder>
        </appender>

        <appender name="LOG_INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <file>${LOG_FILE_INFO}</file>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <!-- daily rollover -->
                <fileNamePattern>${LOG_FILE_INFO}.%d{yyyy-MM-dd}_%i.log.gz</fileNamePattern>
                <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                    <!-- or whenever the file size reaches 10MB -->
                    <maxFileSize>10MB</maxFileSize>
                </timeBasedFileNamingAndTriggeringPolicy>
                <!-- keep 30 days' worth of history -->
                <maxHistory>30</maxHistory>
            </rollingPolicy>
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>INFO</level>
            </filter>
            <encoder>
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS,UTC} %-5level [%thread] %logger{10}:%L - %msg%n</pattern>
            </encoder>
        </appender>


        <appender name="LOG_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <file>${LOG_FILE_ERROR}</file>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <!-- daily rollover -->
                <fileNamePattern>${LOG_FILE_ERROR}.%d{yyyy-MM-dd}_%i.log.gz</fileNamePattern>
                <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                    <!-- or whenever the file size reaches 10MB -->
                    <maxFileSize>10MB</maxFileSize>
                </timeBasedFileNamingAndTriggeringPolicy>
                <!-- keep 30 days' worth of history -->
                <maxHistory>30</maxHistory>
            </rollingPolicy>
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>ERROR</level>
            </filter>
            <encoder>
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS,UTC} %-5level [%thread] %logger{10}:%L - %msg%n</pattern>
            </encoder>
        </appender>

    </springProfile>

    <!--  json -> stdout -> docker -> filebait  -->
    <springProfile name="log2json">
        <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
            <encoder class="net.logstash.logback.encoder.LogstashEncoder">
                <includeCallerData>true</includeCallerData>
            </encoder>
        </appender>

        <!--        &lt;!&ndash;  json -> file &ndash;&gt;-->
        <!--        <appender name="LOG_STASH" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
        <!--            <file>${LOG_FILE_STASH}</file>-->
        <!--            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
        <!--                &lt;!&ndash; daily rollover &ndash;&gt;-->
        <!--                <fileNamePattern>${LOG_FILE_STASH}.%d{yyyy-MM-dd}_%i.log.gz</fileNamePattern>-->
        <!--                <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
        <!--                    &lt;!&ndash; or whenever the file size reaches 10MB &ndash;&gt;-->
        <!--                    <maxFileSize>10MB</maxFileSize>-->
        <!--                </timeBasedFileNamingAndTriggeringPolicy>-->
        <!--                &lt;!&ndash; keep 30 days' worth of history &ndash;&gt;-->
        <!--                <maxHistory>30</maxHistory>-->
        <!--            </rollingPolicy>-->
        <!--            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">-->
        <!--                <level>TRACE</level>-->
        <!--            </filter>-->
        <!--            <encoder class="net.logstash.logback.encoder.LogstashEncoder"/>-->
        <!--        </appender>-->

    </springProfile>









    <!--    <appender name="STASH" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
    <!--        <file>${LOG_FILE_STASH}</file>-->
    <!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
    <!--            <fileNamePattern>logback/redditApp.%d{yyyy-MM-dd}.log</fileNamePattern>-->
    <!--            <maxHistory>7</maxHistory>-->
    <!--        </rollingPolicy>-->
    <!--        <encoder class="net.logstash.logback.encoder.LogstashEncoder"/>-->
    <!--    </appender>-->


    <!-- Фильтратор логирования других пакетов -->
    <logger name="javax.activation" level="WARN"/>
    <logger name="javax.persistence.spi" level="ERROR"/>
    <logger name="javax.mail" level="WARN"/>
    <logger name="javax.management.remote" level="WARN"/>
    <logger name="javax.xml.bind" level="WARN"/>
    <logger name="ch.qos.logback" level="WARN"/>
    <logger name="com.codahale.metrics" level="WARN"/>
    <logger name="com.ryantenney" level="WARN"/>
    <logger name="com.sun" level="WARN"/>
    <logger name="com.zaxxer" level="WARN"/>
    <logger name="io.undertow" level="WARN"/>
    <logger name="io.undertow.websockets.jsr" level="ERROR"/>
    <logger name="org.ehcache" level="WARN"/>
    <logger name="org.apache" level="WARN"/>
    <logger name="org.apache.catalina.startup.DigesterFactory" level="OFF"/>
    <logger name="org.bson" level="WARN"/>
    <logger name="org.hibernate" level="WARN"/>
    <logger name="org.hibernate.validator" level="WARN"/>
    <logger name="org.hibernate.ejb.HibernatePersistence" level="OFF"/>
    <logger name="org.hibernate.SQL" level="OFF"/>                      <!-- SHOW SQL; TRACE to enable, OFF to disable -->
    <logger name="org.hibernate.type.descriptor.sql" level="OFF"/>      <!-- SHOW PARAMS VALUES; TRACE to enable, OFF -->
    <logger name="org.hibernate.tool.hbm2ddl" level="OFF"/>             <!-- DDL SQL SCHEMA MIGRATION; TRACE to enable, OFF -->
    <logger name="org.springframework.transaction" level="OFF"/>      <!-- SHOW TRANSACTIONS TRACE/OFF-->
    <logger name="org.springframework.orm.jpa" level="OFF"/>          <!-- SHOW TRANSACTIONS DETAILS TRACE/OFF-->
    <logger name="org.springframework" level="WARN"/>
    <logger name="org.springframework.web" level="WARN"/>
    <logger name="org.springframework.security" level="WARN"/>
    <logger name="org.springframework.cache" level="WARN"/>
    <logger name="org.springframework.cloud.config" level="INFO"/>
    <logger name="org.thymeleaf" level="WARN"/>
    <logger name="org.xnio" level="WARN"/>
    <logger name="springfox" level="WARN"/>
    <logger name="sun.rmi" level="WARN"/>
    <logger name="org.flywaydb" level="WARN"/>
    <logger name="liquibase" level="WARN"/>
    <logger name="LiquibaseSchemaResolver" level="INFO"/>
    <logger name="sun.rmi.transport" level="WARN"/>
    <logger name="okhttp3" level="WARN"/>
    <logger name="com.hazelcast" level="WARN"/>

    <!-- PROJECT LEVEL DEFAULT -->
    <logger name="ru.kvanttelecom.tv.amprocessor" level="INFO"/>

    <!-- ROOT LEVEL, default log level for packages that not specified above -->
    <root level="INFO">
        <appender-ref ref="CONSOLE"/>

        <springProfile name="!log2json">
            <appender-ref ref="LOG_TRACE"/>
            <appender-ref ref="LOG_INFO"/>
            <appender-ref ref="LOG_ERROR"/>
        </springProfile>

    </root>

    <!--    Deny log messages marked as UNKNOWN_CAMERA_MARKER-->
    <turboFilter class="ch.qos.logback.classic.turbo.MarkerFilter">
        <Name>UNKNOWN_CAMERA_MARKER_FILTER</Name>
        <Marker>UNKNOWN_CAMERA_MARKER</Marker>
        <OnMatch>DENY</OnMatch>
    </turboFilter>

    <!--    Deny log messages marked as DUPLICATE_CAMERA_MARKER-->
    <turboFilter class="ch.qos.logback.classic.turbo.MarkerFilter">
        <Name>DUPLICATE_CAMERA_MARKER_FILTER</Name>
        <Marker>DUPLICATE_CAMERA_MARKER</Marker>
        <OnMatch>DENY</OnMatch>
    </turboFilter>



    <!--    <turboFilter class="ch.qos.logback.classic.turbo.MarkerFilter">-->
    <!--        <Name>MEDIASERVER_EVENT_FILTER</Name>-->
    <!--        <Marker>MEDIASERVER_EVENT</Marker>-->
    <!--        <OnMatch>DENY</OnMatch>-->
    <!--    </turboFilter>-->

    <!--    <turboFilter class="ch.qos.logback.classic.turbo.MarkerFilter">-->
    <!--        <Name>AMQP_CLIENT_MARKER_FILTER</Name>-->
    <!--        <Marker>AMQP_CLIENT_MARKER</Marker>-->
    <!--        <OnMatch>DENY</OnMatch>-->
    <!--    </turboFilter>-->

</configuration>
