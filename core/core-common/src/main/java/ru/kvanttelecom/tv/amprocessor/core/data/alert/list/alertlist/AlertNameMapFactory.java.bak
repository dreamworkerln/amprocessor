package ru.kvanttelecom.tv.alertmanager.core.data.alert.list.alertlist;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import java.beans.Introspector;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static ru.dreamworkerln.spring.utils.common.StringUtils.notBlank;

@Component
public class AlertNameMapFactory {

    @Autowired
    private ApplicationContext context;

    @Autowired
    private List<AlertList> specialAlertList;

    private Map<String, Class<? extends AlertList>> namedAlertTypeMap;


    @PostConstruct
    private void init() {
        //namedAlertMap = Maps.uniqueIndex(namedAlertList, AlertList::getName);


        namedAlertTypeMap = specialAlertList.stream()
            .filter(i -> notBlank(i.getName())) // remove default DefaultAlertList, leave only specialized AlertLists
            .collect(Collectors.toMap(AlertList::getName, AlertList::getClass));

        //namedAlertTypeMap.remove()


            //map(AlertList::getClass).collect(Collectors.toList());
    }

    /**
     * Will create map filled with custom AlertList prototype beans
     * @return new exemplar of Map<String,AlertList> (NameAlertMap)
     */

    public Map<String, AlertList> createSpecialAlertList() {

        //Map<String, AlertList> result = new HashMap<>();
        //namedAlertTypeMap.forEach((name, clazz) -> result.put(name, context.getBean(clazz)));
        //return result;

        return namedAlertTypeMap.entrySet().stream()
            //.filter(e -> notBlank(e.getKey()))
            .collect(Collectors.toMap(Map.Entry::getKey,
                e -> context.getBean(Introspector.decapitalize(e.getValue().getSimpleName()), e.getValue())));
    }
}
